#  Copyright 2019 Stian Soiland-Reyes
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from snakemake.utils import min_version
min_version("5.8")

workdir: "../../../../data/"

import os
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

TYPES = ["software", "dataset", "others"]

rule all:
    input:
        dynamic("software/listing/{sample}.txt"),
        dynamic("dataset/listing/{sample}.txt"),
        dynamic("others/listing/{sample}.txt"),

rule zipfiles:
    input: # https://doi.org/10.5281/zenodo.3531504
        HTTP.remote("zenodo.org/record/3531504/files/zenodo-records-json-2019-09-16-filtered.jsonseq.xz", keep_local=True)
    output:
        "zenodo-records/zipfiles.tsv"
    conda:
        "envs/jq.yaml"
    shell: # TODO: Split into .jq script file
        "xzcat {input} |"
        """jq -r '. | select(.metadata.access_right == "open") | 
            .metadata.resource_type.type as $rectype |
            . as $rec | 
            ( .files[]?  | select(.type == "zip") ) |
            [$rec.id, $rec.links.self, $rec.links.doi, .checksum, .links.self, .size, .type, .key, $rectype] | @tsv
            '"""
        "> zenodo-records/zipfiles.tsv"

rule seed:
    output:
        "seed"
    shell: 
        "dd if=/dev/urandom of=seed bs=1024 count=1024"

rule shuffled:
    input: 
        tsv=rules.zipfiles.output,
        seed=rules.seed.output
    output:
        "zenodo-records/zipfiles-shuffled.tsv"
    conda:
        "envs/coreutils.yaml"
    shell:
        "shuf --random-source={input.seed} {input.tsv} > {output}"

rule splitzipfiles:
    input: 
        rules.shuffled.output
    output:
        software="zenodo-records/zipfiles-software.tsv",
        dataset="zenodo-records/zipfiles-dataset.tsv",
        others="zenodo-records/zipfiles-others.tsv"
    shell:
        "grep software$ {input} > {output.software} ;"
        "grep dataset$ {input} > {output.dataset} ;"
        "grep -v software$ {input} | grep -v dataset$ > {output.others}"

rule samples:
    input:
        "zenodo-records/zipfiles-{type}.tsv"
    output:
        dynamic("{type}/sample/{sample}.tsv")
    params:
        maxsamples="2000"
    shell:
        "head --lines={params.maxsamples} {input} | "
        "split --additional-suffix .tsv --lines 1 - {type}/sample/"

rule downloadzip:
    input:
        "{type}/sample/{sample}.tsv"
    output:
        zip=temp("{type}/zip/{sample}.zip"),
        listing="{type}/listing/{sample}.txt"
    threads: 4
    conda:
        "envs/curl-unzip.yaml"
    shell:
        """URL="`awk '{{print $5}}' {input}`";
        curl --fail --retry 5 --retry-connrefused --output {output.zip} $URL || touch {output.zip};
        (unzip -Z -1 {output.zip} || true) > {output.listing}
        """

